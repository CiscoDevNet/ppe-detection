FROM openhorizon/aarch64-tx2-cudabase


# Install python and pip
RUN apt-get update && apt-get install -y \
  python3-pip \
  python3-dev \
  python3-numpy \
  python3-wheel \
  python3-tk

# Install TF-gpu 1.5 with python3
#RUN pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp33 tensorflow-gpu

RUN pip3 install --upgrade \
  pip \
  setuptools \
  https://github.com/frankgu968/installTensorFlowTX2/raw/master/whl/tensorflow-1.5.0-cp35-cp35m-linux_aarch64.whl

# Pillow dependencies
RUN apt-get install -y libblas-dev \
  liblapack-dev \
  libjpeg-dev \
  libgtk2.0-dev \
  libhdf5-dev \
  libhdf5-serial-dev \
  libpng-dev \
  python3-matplotlib \
  zlib1g-dev

### Keras dependencies
RUN pip3 install --no-cache-dir --upgrade \
  graphviz \
  pydot \
  pandas \
  Pillow \
  pyzmq==17.0.0 \
  Flask

RUN export CC=h5cc
RUN HDF5_DIR=/usr/lib/aarch64-linux-gnu/hdf5/serial/ pip3 install --no-cache-dir h5py

# Install scipy, keras
RUN pip3 install --no-cache-dir --upgrade \
  scipy \
  keras \
  scikit-learn

RUN apt-get install -y build-essential make cmake cmake-curses-gui \
                       g++ libavformat-dev libavutil-dev \
                       libswscale-dev libv4l-dev libeigen3-dev \
                       libglew-dev libgtk2.0-dev

RUN apt-get install -y libdc1394-22-dev libxine2-dev \
                       libgstreamer1.0-dev \
                       libgstreamer-plugins-base1.0-dev

RUN apt-get install -y libjpeg8-dev libjpeg-turbo8-dev libtiff5-dev \
                       libjasper-dev libpng12-dev libavcodec-dev

RUN apt-get install -y libxvidcore-dev libx264-dev libgtk-3-dev \
                       libatlas-base-dev gfortran

RUN apt-get install -y libopenblas-dev liblapack-dev liblapacke-dev

RUN apt-get install -y qt5-default

RUN apt-get install -y libopenexr22

COPY cv2.cpython-35m-aarch64-linux-gnu.so /usr/local/lib/python3.5/dist-packages/

COPY lib/libopencv* /usr/local/lib/

#RUN rm /usr/lib/aarch64-linux-gnu/tegra/libcudnn.so.7

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/aarch64-linux-gnu/

RUN mkdir -p /ekholabs/face-classifier

ADD src  /ekholabs/face-classifier/src

ADD images /ekholabs/face-classifier/images

ADD trained_models /ekholabs/face-classifier/trained_models

WORKDIR /ekholabs/face-classifier

ENV PYTHONPATH=$PYTHONPATH:src
ENV FACE_CLASSIFIER_PORT=8084
EXPOSE $FACE_CLASSIFIER_PORT

#ENTRYPOINT ["python3"]
#CMD ["src/web/faces.py"]

#RUN cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local \
#        -D WITH_CUDA=ON -D CUDA_ARCH_BIN="6.2" -D CUDA_ARCH_PTX="" \
#        -D WITH_CUBLAS=ON -D ENABLE_FAST_MATH=ON -D CUDA_FAST_MATH=ON \
#        -D ENABLE_NEON=ON -D WITH_LIBV4L=ON -D BUILD_TESTS=OFF \
#        -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF \
#        -D WITH_QT=ON -D WITH_OPENGL=ON -D BUILD_NEW_PYTHON_SUPPORT=ON \
#        -D BUILD_opencv_python3=ON -D HAVE_opencv_python3=ON \
#        -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3.5 ..

#RUN make -j4

#RUN make install
## Clean up (remove ~6GB space)
#RUN rm -rf /var/cuda-repo-9-0-local/*.deb
#RUN rm -rf /usr/local/cuda-9.0/doc/*
#RUN rm -rf /root/src/jetsonhacks
#RUN mv /usr/local/cuda-9.0/samples/2_Graphics/ /usr/local/cuda-9.0/
#RUN rm -rf /usr/local/cuda-9.0/samples/*
#RUN mv /usr/local/cuda-9.0/2_Graphics/ /usr/local/cuda-9.0/samples/
